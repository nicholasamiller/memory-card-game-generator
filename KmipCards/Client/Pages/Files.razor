@page "/load"
@using System.IO
@using System.Text
@using KmipCards.Client.Services
@using KmipCards.Client.Interfaces
@using KmipCards.Shared
@using System.ComponentModel.DataAnnotations
@inject             Interfaces.ICardSetViewModel CardRepository

<svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
	<symbol id="check-circle-fill" fill="currentColor" viewBox="0 0 16 16">
		<path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z" />
	</symbol>
</svg>

<div class="container-fluid">
	<div class="col border">
				<h3>Load your own</h3>
				<EditForm EditContext=@_editContext OnValidSubmit=@LoadToRepo>
					<DataAnnotationsValidator />
					<div class="mb-3">
						<label for="upload" class="form-label">Upload your own file with card data.</label>
						<InputFile id="upload" type="file" class="form-control" accept=".txt" OnChange=@LoadData></InputFile>
					</div>
					<ValidationMessage For="@(() => loadCharactersModel.ParsedCards)" />
					<InputRadioGroup @bind-Value="loadCharactersModel.LoadIntention">
						@foreach (var option in LoadIntentionValues)
						{
							<InputRadio Value=@option /> @option <br />
						}
					</InputRadioGroup>
					<ValidationMessage For="@(() => loadCharactersModel.LoadIntention)" />

					<div class="form-text">
						<p>One card per line, with the format:</p>
						<p><i>Chinese characters (pinyin) English translation #optionalTag1 #optionalTag2</i></p>
						<p>For example:</p>

						<code>
							一 (yì) one<br />

							二 (èr) two #numbers<br />

							三 (sān) three #numbers<br />

							人 (rén) a person, human	#basic<br />
						</code>

					</div>

					<div class="mb-3 mt-3">
						<button class="btn btn-primary" type="submit">Load</button>
					</div>

					<div id="successMessage" class="d-@successMessageDisplayClassValue">
						<div class="alert alert-success d-flex align-items-center" role="alert">
							<svg class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Success:"><use xlink:href="#check-circle-fill" /></svg>
							<div>
								An example success alert with an icon
							</div>
						</div>
					</div>
				</EditForm>
			</div>

</div>


@*<div id="loadHelp" class="form-text">
	Currently loaded: @(CardRepository.CurrentlyLoadedListName != null ? @CardRepository.CurrentlyLoadedListName
	: "None")

	</div>*@

@code {

	private string successMessageDisplayClassValue = "none";

	private class LoadCharactersModel
	{

		[Required(ErrorMessage = "Do you want to replace the currently loaded set or add to it?")]

		public string LoadIntention { get; set; }
		public List<CardRecord> ParsedCards { get; set; }

		public LoadCharactersModel()
		{
			ParsedCards = new List<CardRecord>();
		}
	}


	private static List<string> LoadIntentionValues => new List<string>() { "Append", "Replace" };

	LoadCharactersModel loadCharactersModel;

	EditContext _editContext;
	ValidationMessageStore _messageStore;
	protected override void OnInitialized()
	{
		loadCharactersModel = new LoadCharactersModel();
		_editContext = new EditContext(loadCharactersModel);
		_editContext.OnValidationRequested += HandleValidationRequested;

		_messageStore = new(_editContext);
	}

	private void HandleValidationRequested(object sender, ValidationRequestedEventArgs args)
	{
		_messageStore.Clear();
		if (loadCharactersModel.ParsedCards.Count == 0)
		{
			_messageStore.Add(() => loadCharactersModel.ParsedCards, "Load a valid file.");
		}
	}

	private void LoadToRepo()
	{
		if (loadCharactersModel.LoadIntention == "Replace")
		{
			CardRepository.RemoveAllCards();
		}
		foreach (var card in loadCharactersModel.ParsedCards)
		{
			CardRepository.AddCard(card);
		}
		StateHasChanged();

	}

	private async Task TryLoadCards(IBrowserFile file)
	{
		try
		{
			using StreamReader streamReader = new(file.OpenReadStream(), Encoding.UTF8);
			string line;

			while ((line = await streamReader.ReadLineAsync()) != null)
			{
				var parsedLine = CardRecord.ParseFromLine(line);
				if (parsedLine != null)
				{
					loadCharactersModel.ParsedCards.Add(parsedLine);
				}
			}
		}

		catch (Exception ex)
		{
			Console.WriteLine(ex);
		}
	}

	private async Task LoadData(InputFileChangeEventArgs e)
	{
		await TryLoadCards(e.File);
	}

	public void Dispose()
	{
		_editContext.OnValidationRequested -= HandleValidationRequested;
	}

}

