@using KmipCards.Client.Dialogs
@using KmipCards.Shared;
@using KmipCards.Client.Interfaces;
@using System.Diagnostics
@inject ICardSetViewModel CardSetViewModel;
@inject IDialogService DialogService;

<style>
    .selected {
        background-color: #1E88E5 !important;
    }

        .selected > td {
            color: white !important;
        }

            .selected > td .mud-input {
                color: white !important;
            }
</style>


<MudTable Breakpoint="Breakpoint.None" @ref="mudTable" RowClassFunc="@SelectedRowClassFunc" OnRowClick="RowClickEvent"  Items=@(_cards) ReadOnly="@false" 
  T="CardRecord">
  <ToolBarContent>
	  <MudTextField T="string" TextChanged="@OnTextChanged" Text="@CardSetViewModel.CurrentlyLoadedListName"></MudTextField>
	  <MudSpacer/>
		<MudIconButton Size="@Size.Medium"  Icon="@Icons.Material.Filled.Edit" Disabled="@_disableToolbarButtons" OnClick="@EditSelectedCard" />
		<MudIconButton Size="@Size.Medium"  Icon="@Icons.Material.Filled.Delete"  Disabled="@_disableToolbarButtons" OnClick="@DeleteSelectedCard"/>
  </ToolBarContent>
	<RowTemplate>
		<MudTd Class="pl-6 kmipCardsListRow" DataLabel="Chinese">@context.CardDataDto.Chinese</MudTd>
		<MudTd Class="kmipCardsListRow" DataLabel="Pinyin">@context.CardDataDto.Pinyin</MudTd>
		<MudTd Class="kmipCardsListRow" DataLabel="English">@context.CardDataDto.English</MudTd>
	</RowTemplate>	
</MudTable>
 

@code {
	private MudTable<CardRecord> mudTable;
	private CardRecord _currentlySelectedRecord = null;
	private int currentlySelectedRowNumber = -1;
	private IEnumerable<CardRecord> _cards;
	private bool _disableToolbarButtons = true;


	protected override async Task OnInitializedAsync()
	{
		CardSetViewModel.CardSetChanged += (sender, args) =>
		{
			StateHasChanged();
		};
		//_cards = await CardSetViewModel.LoadInitialCards();
		await base.OnInitializedAsync();
	}

	// fires before RowClassFunc 
	private void RowClickEvent(TableRowClickEventArgs<CardRecord> tableRowClickEventArgs)
	{
		SetSelectedItem(tableRowClickEventArgs);	
		SetToolbarButtonsStatus();
	}

	private async Task EditSelectedCard(MouseEventArgs mouseEventArgs)
	{
		var dialogParams = new DialogParameters();
		// name of param has to match name of Component Parameter
		dialogParams.Add("CardRecord", _currentlySelectedRecord);
		var editCardDialog = DialogService.Show<CharacterDialog>("Edit Card", dialogParams, new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true });
		var result = await editCardDialog.Result;
		var cardData = result.Data as CardRecord;
		if (cardData != null)
		{
			await CardSetViewModel.RemoveCard(_currentlySelectedRecord);
			await CardSetViewModel.AddCard(cardData);
		}
	}

	private async Task DeleteSelectedCard(MouseEventArgs mouseEventArgs)
	{
		await CardSetViewModel.RemoveCard(_currentlySelectedRecord);	 
	}

	// only files when edit complete
	private async Task OnTextChanged(string text)
	{
		await CardSetViewModel.RenameList(text);
	}

	private void SetSelectedItem(TableRowClickEventArgs<CardRecord> tableRowClickEventArgs)
	{
		if (_currentlySelectedRecord == tableRowClickEventArgs.Item) // deselect
		{
			_currentlySelectedRecord = null;
		}
		else
		{
			_currentlySelectedRecord = tableRowClickEventArgs.Item;
		}
	}

	private void SetToolbarButtonsStatus()
	{
		_disableToolbarButtons = _currentlySelectedRecord == null;
	}

	private string SelectedRowClassFunc(CardRecord record, int rowNumber)
	{
		if (_currentlySelectedRecord == record)
		{
			return "selected"; 
		}
		else 
		{
			return String.Empty;
		}
	}



}
