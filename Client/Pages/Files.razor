@page "/load"
@using System.IO
@using System.Text
@using Client.Services
@using MemoryCardGenerator.Shared
@using System.ComponentModel.DataAnnotations
@inject ICardRepository CardRepository


<div class="container-fluid">
<div class="col">
	<div class="card"> 
		<div class="card-body">
			 <h5 class="card-title">Load your Own</h5>
<EditForm EditContext=@_editContext  OnValidSubmit=@LoadToRepo>
	<DataAnnotationsValidator/>
	<div class="mb-3">
		<label for="upload" class="form-label">Upload your own file with card data.</label>
		<InputFile id="upload" type="file" class="form-control" accept=".txt" OnChange=@LoadData></InputFile>
	</div>
	<ValidationMessage For="@(() => loadCharactersModel.ParsedCards)"/> 
	<InputRadioGroup @bind-Value="loadCharactersModel.LoadIntention">
		@foreach (var option in LoadIntentionValues)
						{
							<InputRadio Value=@option/> @option <br/>
						}
	</InputRadioGroup>
	<ValidationMessage For="@(() => loadCharactersModel.LoadIntention)"/>
		
	<div class="form-text">
		<p>One card per line, with the format:</p>
	 <p><i>Chinese characters (pinyin) English translation #optionalTag1 #optionalTag2</i></p>
	 <p>For example:</p>
		
	<code>
一 (yì) one<br />

二 (èr) two #numbers<br />

三 (sān) three #numbers<br />

人 (rén) a person, human	#basic<br />
	</code>

	</div>

	<div class="mb-3 mt-3">
		<button class="btn btn-primary" type="submit">Load</button>
	</div>
</EditForm> </div>
	
</div>
</div>
</div>


@*<div id="loadHelp" class="form-text">
	Currently loaded: @(CardRepository.CurrentlyLoadedListName != null ? @CardRepository.CurrentlyLoadedListName
	: "None")

	</div>*@

@code {

	private class LoadCharactersModel
	{
		
		[Required(ErrorMessage="Do you want to replace the currently loaded set or add to it?")]

		public string LoadIntention { get; set; }
		public List<CardRecord> ParsedCards { get; set; }

		public LoadCharactersModel()
		{
			ParsedCards = new List<CardRecord>();		
		}
	}

		
	private static List<string> LoadIntentionValues => new List<string>() { "Append", "Replace" };

	LoadCharactersModel loadCharactersModel = new LoadCharactersModel();

	EditContext _editContext;
	ValidationMessageStore _messageStore;
	protected override void OnInitialized()
	{
		_editContext = new EditContext(loadCharactersModel);
		_editContext.OnValidationRequested += HandleValidationRequested;
	
		_messageStore = new(_editContext);
	}
	
	private  void HandleValidationRequested(object sender, ValidationRequestedEventArgs args)
	{
		_messageStore.Clear();
		if (loadCharactersModel.ParsedCards.Count == 0)
		{
			_messageStore.Add(() => loadCharactersModel.ParsedCards, "Load a valid file.");
		}
	}

	private void LoadToRepo()
	{
		CardRepository.RemoveAllCards();
		foreach (var card in loadCharactersModel.ParsedCards)
		{
			CardRepository.AddCard(card);		
		}
		StateHasChanged();

	}

	private async Task TryLoadCards(IBrowserFile file)
	{
		try
		{
			using StreamReader streamReader = new(file.OpenReadStream(), Encoding.UTF8);
			string line;

			while ((line = await streamReader.ReadLineAsync()) != null)
			{
				var parsedLine = CardRecord.ParseFromLine(line);
				if (parsedLine != null)
				{
					loadCharactersModel.ParsedCards.Add(parsedLine);
				}
			}
		}

		catch (Exception ex)
		{
			Console.WriteLine(ex);
		}
	}

	private async Task LoadData(InputFileChangeEventArgs e)
	{
		await TryLoadCards(e.File);
	}

	public void Dispose()
	{
		_editContext.OnValidationRequested -= HandleValidationRequested;
	}

}

