@page "/add"
@using KmipCards.Shared
@using KmipCards.Client.Interfaces;
@inject ICardRepository CardRepository
@inject HttpClient _httpClient;

<EditForm OnValidSubmit="Submit" Model="@_card">
     <DataAnnotationsValidator />
  <div class="mb-3">
    <label for="chinese" class="col-form-label">汉字 Chinese Character(s)</label>
     <div class="mb-3 input-group">
        <InputText @bind-Value=_card.Chinese class=form-control id=chinese/>
        <button class="btn btn-outline-secondary" type="button" @onclick="@OnTranslationRequestedChinese">Translate</button>
        <ValidationMessage For="@(() => _card.Chinese)"/>
    </div>
  </div>
  <div class="mb-3">
    <label for="pinyin" class="form-label">拼音 Pinyin</label>
    <InputText @bind-Value=_card.Pinyin class=form-control id=pinyin/>
        <ValidationMessage For="@(() => _card.Pinyin)"/>
  </div>
  <div class="mb-3">
    <label for="english" class="form-label">英语 English</label>
   <div class="mb-3 input-group">
       <InputText @bind-Value=_card.English class="form-control" id="english"></InputText>
        <button class="btn btn-outline-secondary" type="button" @onclick="@OnTranslationRequestedEnglish">Translate</button>
       <ValidationMessage For="@(() => _card.English)"/>
   </div>
    

  </div>
 @* <div class="mb-3">
    <label for="tags" class="form-label">Tags</label>
    
    <InputText @bind-Value=_tags class="form-control" id="tags"></InputText>
        <ValidationMessage For="@(() => _tags)"/>
  </div>*@
  
  <div>

  <button type="submit" class="btn btn-primary">提交 Add</button>
  </div>
</EditForm>

@code {

    CardDataDto _card = new CardDataDto();
    string _tags = String.Empty;

    private enum TranslationSource {
        Chinese,
        English
    }

    private async Task OnTranslationRequestedChinese()
    {
        await OnTranslationRequested(TranslationSource.Chinese);
    }
    private async Task OnTranslationRequestedEnglish()
    {
        await OnTranslationRequested(TranslationSource.English);
    }

    private async Task OnTranslationRequested(TranslationSource translationSource)
    {
        try
        {

            if (translationSource == TranslationSource.Chinese)
            {
                // clear pinyin and english
                _card.English = null;
                _card.Pinyin = null;
            }
            else if (translationSource == TranslationSource.English)
            {
                _card.Chinese = null;
                _card.Pinyin = null;
            }
            var requestDto = new TranslationRequestDto() { English = _card.English, Chinese = _card.Chinese, Pinyin = _card.Pinyin }; 

            var translationResponse = await _httpClient.PostAsJsonAsync("/api/translate", requestDto);
            translationResponse.EnsureSuccessStatusCode();
            var dtoReturned = await translationResponse.Content.ReadFromJsonAsync<CardDataDto>();
            _card = dtoReturned;
            StateHasChanged();

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }

    }

	private void Submit()
	{
        var tags = _tags.Split(",").Select(t => t.Trim()).ToArray();
        CardRepository.AddCard(new CardRecord() { CardDataDto = _card, Tags = tags });
        _card = new CardDataDto();
        StateHasChanged();
    }

}
